{
  "id": 844,
  "unit_id": 83,
  "title": "Lesson 17: Practical Examples: Build a Dynamic List with JavaScript",
  "slug": "lesson_17_practical_examples_build_a_dynamic_list_with_javascript",
  "content": "<div class=\"pt-6\">\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 17: Practical Examples: Build a Dynamic List with JavaScript</h1>\n    <p class=\"text-gray-600 text-lg mb-8 text-center px-4\">\n        We've learned all the fundamental DOM skills. Now, let's apply them to build a real, interactive feature: a dynamic to-do list!\n    </p>\n\n    <!-- Illustration: A dynamic list being built -->\n    <div class=\"flex justify-center mb-8\">\n        <svg class=\"h-64 w-full max-w-2xl\" viewBox=\"0 0 1920 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"1920\" height=\"500\" rx=\"10\" fill=\"#F0F4F8\"/>\n            <!-- UI Elements -->\n            <rect x=\"100\" y=\"100\" width=\"800\" height=\"300\" rx=\"8\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n            <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"#E65100\">Dynamic List Builder</text>\n            <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/> <!-- Input Field -->\n            <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Task Input</text>\n            <rect x=\"150\" y=\"300\" width=\"200\" height=\"50\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-width=\"1\"/> <!-- Add Button -->\n            <text x=\"250\" y=\"330\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Add Task</text>\n            <!-- Dynamic List -->\n            <rect x=\"1000\" y=\"100\" width=\"800\" height=\"300\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n            <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"#1976D2\">The List (`<ul>`)</text>\n            <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#A5D6A7\" stroke=\"#66BB6A\" stroke-1=\"1\"/> <!-- List Item 1 -->\n            <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#388E3C\">Task 1</text>\n            <rect x=\"1100\" y=\"270\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/> <!-- List Item 2 -->\n            <text x=\"1450\" y=\"300\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Task 2</text>\n            <rect x=\"1100\" y=\"340\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/> <!-- New Task Added -->\n            <text x=\"1450\" y=\"390\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#BF360C\">New Task Added Dynamically!</text>\n            <!-- Connection -->\n            <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n            <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n            <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">User Input Creates DOM Changes</text>\n        </svg>\n        <p class=\"intro-explanation text-gray-600 leading-relaxed\">Building a dynamic list is a fantastic way to apply almost everything you've learned about the DOM. You'll use event listeners to capture user input, `document.createElement()` to generate new list items (`<li>`), `.textContent` or `.innerHTML` to add the task details, and `.appendChild()` to add them to your `<ul>` or `<ol>`. This project solidifies your understanding of how JavaScript brings web pages to life.</p>\n        <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Put your DOM skills to practice: Build a dynamic list!</p>\n    </div>\n\n    <!-- Tab 2 Content -->\n    <div class=\"tab-content content2\" id=\"content2\">\n        <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 2: Interactive To-Do List</h3>\n        <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Imagine a to-do list where you can type a task, click \"Add,\" and see it appear instantly. What JavaScript skills are essential for this?</h2>\n        <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n            <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                <!-- UI Elements -->\n                <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">To-Do List UI</text>\n                <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/> <!-- Input Field -->\n                <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Task Input Field</text>\n                <rect x=\"150\" y=\"300\" width=\"700\" height=\"50\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/> <!-- Add Button -->\n                <rect x=\"150\" y=\"480\" width=\"200\" height=\"50\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                <text x=\"250\" y=\"510\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Add Task Button</text>\n                <!-- Dynamic List -->\n                <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">The List (`<ul>`)</text>\n                <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#A5D6A7\" stroke=\"#66BB6A\" stroke-1=\"1\"/> <!-- List Item 1 -->\n                <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#388E3C\">Task 1</text>\n                <rect x=\"1100\" y=\"270\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/> <!-- List Item 2 -->\n                <text x=\"1450\" y=\"300\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Task 2</text>\n                <!-- Connection -->\n                <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Event Listeners & DOM Updates</text>\n            </svg>\n            <p class=\"intro-explanation text-gray-600 leading-relaxed\">To build an interactive to-do list, you'll need to: select the input field and button, add an event listener to the button (for the 'click' event), get the input's value when clicked, create a new `<li>` element, set its `textContent` to the input's value, and finally, append that `<li>` to the `<ul>` list. This process demonstrates how user actions can directly drive DOM changes.</p>\n            <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">User actions modify the DOM: Build interactive lists!</p>\n        </div>\n    </div>\n    <!-- Tab 3 Content -->\n    <div class=\"tab-content content3\" id=\"content3\">\n        <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 3: Building with JavaScript</h3>\n        <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Imagine you have building materials (HTML elements) and a toolbox (JavaScript). How do you use these tools to construct a new part of your webpage, like a list item?</h2>\n        <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n            <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                <!-- Building Materials -->\n                <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Building Materials</text>\n                <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Material: `<li>` tag</text>\n                <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">Material: Text Content</text>\n                <!-- JS Toolbox -->\n                <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Construction Kit</text>\n                <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 1: `createElement('li')`</text>\n                <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 2: `textContent`</text>\n                <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 3: `appendChild(newLi)`</text>\n                <!-- Connection -->\n                <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Build and Assemble</text>\n            </svg>\n            <p class=\"intro-explanation text-gray-600 leading-relaxed\">Building dynamic content involves using JavaScript as your construction crew. First, you `createElement()` to make the new piece (like an `<li>`). Then, you configure it by setting its content or attributes. Finally, you use `appendChild()` or `prepend()` to attach this new element to its rightful place in the existing DOM structure, like adding a new item to a list or a heading to a section.</p>\n            <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">JavaScript is your builder: Create, configure, and place elements!</p>\n        </div>\n    </div>\n    <!-- Tab 4 Content -->\n    <div class=\"tab-content content4\" id=\"content4\">\n        <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 4: From Static to Dynamic</h3>\n        <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Your initial HTML might have an empty list `<ul>`. How do you make that list grow and change as the user interacts with the page, without a page refresh?</h2>\n        <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n            <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                <!-- Initial State -->\n                <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Initial State</text>\n                <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">List: <ul></text>\n                <!-- User Interaction -->\n                <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">User Interaction</text>\n                <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">User types \"Buy milk\"</text>\n                <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">User clicks \"Add Task\"</text>\n                <!-- JS Action -->\n                <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\">JS: Creates `<li>` with text, Appends to `<ul>`</text>\n                <!-- Connection -->\n                <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">User Input Drives DOM Changes</text>\n            </svg>\n            <p class=\"intro-explanation text-gray-600 leading-relaxed\">Creating and appending elements is fundamental to making pages dynamic. You'll often use these methods in response to user actions, like typing in an input field and clicking an \"Add\" button. The JavaScript code listens for the event, creates the new element with the desired content and attributes, and then appends or prepends it to the correct parent element, updating the page in real-time without a full reload.</p>\n            <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">User interaction updates the DOM!</p>\n        </div>\n    </div>\n    <!-- Tab 5 Content -->\n    <div class=\"tab-content content5\" id=\"content5\">\n        <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 5: The DOM Construction Kit</h3>\n        <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">What are the essential JavaScript tools you'd use to build a new list item (`<li>`) and add it to an existing unordered list (`<ul>`)?</h2>\n        <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n            <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                <!-- Tools -->\n                <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">The JavaScript Toolbox</text>\n                <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">1. Create: `createElement('li')`</text>\n                <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">2. Configure: `.textContent = 'New Task'`</text>\n                <rect x=\"150\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                <rect x=\"150\" y=\"650\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                <!-- Actions -->\n                <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">Putting it Together</text>\n                <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Find Parent: `document.getElementById('myList')`</text>\n                <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">Append: `ulElement.appendChild(liElement)`</text>\n                <!-- Connection -->\n                <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Create, Configure, Insert</text>\n            </svg>\n            <p class=\"intro-explanation text-gray-600 leading-relaxed\">Building dynamic content involves a workflow: First, create the element you need using `document.createElement('tagName')`. Then, configure it by setting its text (`textContent`), attributes (`setAttribute`), or classes (`classList.add`). Finally, insert it into the document where it belongs using `appendChild()` to add it to the end of a parent's children, or `prepend()` to add it to the beginning. This sequence allows for the creation of complex, interactive UIs.</p>\n            <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">The DOM builder's workflow: Create, Configure, Insert!</p>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->",
  "questions": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 17: Practical Examples: Build a Dynamic List with JavaScript</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Let's Test Your Practical DOM Skills!</h2>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 1: What are the main HTML elements typically needed for a dynamic list where users can add items?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You typically need an input field (like `<input type=\"text\">`) for the user to type the item, a button (like `<button>`) to trigger the addition, and an unordered or ordered list (`<ul>` or `<ol>`) to display the items.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 2: What JavaScript event is usually listened for on the \"Add\" button?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> The <strong>`click`</strong> event is typically listened for on the \"Add\" button.\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Button -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"50\" rx=\"8\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">Add Button</text>\n                    <!-- JS Listener -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: button.addEventListener('click', ...);</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 3: How do you get the text typed by the user into an input field?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You access the `value` property of the input element: `inputElement.value`.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 4: What DOM method is used to create a new list item (`<li>`)?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It's `document.createElement('li')`.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 5: After creating an `<li>` element and setting its text, which method adds it to the end of a `<ul>`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You use the `appendChild()` method on the `<ul>` element: `ulElement.appendChild(newListItem)`.\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Parent UL -->\n                    <rect x=\"50\" y=\"50\" width=\"250\" height=\"50\" rx=\"5\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"175\" y=\"80\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">Parent: ul</text>\n                    <!-- New LI -->\n                    <rect x=\"150\" y=\"100\" width=\"100\" height=\"30\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"200\" y=\"120\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"14\" fill=\"#E64A19\">New li</text>\n                    <!-- JS Code -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: ulElement.appendChild(newLi);</text>\n                    <text x=\"450\" y=\"155\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">Adds new li at the END</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 6: What's the difference between `appendChild()` and `prepend()`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> `appendChild()` adds a node as the <strong>last child</strong>, while `prepend()` adds it as the <strong>first child</strong> of the parent element.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 7: How would you create a new list item (`<li>`) and prepend it to a `<ul>` with `id=\"myList\"`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const newListItem = document.createElement(\"li\");\nnewListItem.textContent = \"New item at the top\";\n\nconst myListElement = document.getElementById(\"myList\");\nif (myListElement) {\n  myListElement.prepend(newListItem);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 8: What if you need to add multiple new elements to a parent?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You would typically create all the elements first, then loop through them and `appendChild()` or `prepend()` each one. For better performance with many elements, consider using a `DocumentFragment`.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 9: What is `document.createTextNode()` used for?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It's used to create a <strong>Text Node</strong>, which represents the text content within an element. This text node can then be appended or prepended like any other node.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 10: Can you append an element that's already in the DOM? What happens?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Yes, you can. When you append or prepend an element that is already part of the DOM, it is <strong>moved</strong> from its current location to the new location. It's not duplicated.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 11: What's the difference between appending an element and setting `innerHTML`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> `appendChild()` and `prepend()` add existing DOM nodes (elements). `innerHTML` takes a string and parses it as HTML, creating new DOM nodes from that string. `appendChild`/`prepend` are generally more performant when adding pre-created elements.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 12: Create a list item with an attribute</h3>\n        <p class=\"text-gray-600 mb-3\">Create a new `<li>` element, set its text to \"Task 1\", and set its `data-id` attribute to \"task-001\". Then append it to a `<ul>` with `id=\"taskList\"`.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const newTask = document.createElement(\"li\");\nnewTask.textContent = \"Task 1\";\nnewTask.setAttribute(\"data-id\", \"task-001\");\n\nconst taskList = document.getElementById(\"taskList\");\nif (taskList) {\n  taskList.appendChild(newTask);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 13: Prepend a warning message</h3>\n        <p class=\"text-gray-600 mb-3\">Create a `<p>` element with the class \"warning\" and the text \"Please save your work.\", then prepend it to the `<div>` with `id=\"editorArea\"`.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const warningMsg = document.createElement(\"p\");\nwarningMsg.textContent = \"Please save your work.\";\nwarningMsg.classList.add(\"warning\"); // Using classList is often cleaner\n\nconst editorDiv = document.getElementById(\"editorArea\");\nif (editorDiv) {\n  editorDiv.prepend(warningMsg);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 14: Why is it generally better to create and append elements compared to using `innerHTML` for creating many elements?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Creating elements with `createElement` and then appending them is often more performant and safer (especially if dealing with user input) than building large HTML strings and assigning them to `innerHTML`, as it avoids repeated HTML parsing.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 15: What if you need to insert an element in the middle?</h3>\n        <p class=\"text-gray-600 mb-3\"> `appendChild` adds to the end, `prepend` adds to the beginning. What if you need to insert a new element right before a specific existing child?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You would typically use `insertBefore(newNode, referenceNode)`. This method inserts `newNode` into the parent's children just before the `referenceNode`.\n            </p>\n        </div>\n    </div>\n\n</div>\n<!--end-of-code-block-->",
  "display_order": 17,
  "created_at": "2025-06-29 16:06:33",
  "updated_at": "2025-06-30 08:35:40",
  "exercises": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 17: Practical Examples: Build a Dynamic List with JavaScript</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Let's Build a Dynamic To-Do List!</h2>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 1: Basic HTML Structure</h3>\n        <p class=\"text-gray-600 mb-3\">Set up the HTML for a simple dynamic list. You'll need an input field for new tasks, a button to add tasks, and an empty `<ul>` to hold the list items.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code><!DOCTYPE html>\n<html>\n<head>\n    <title>Dynamic List</title>\n</head>\n<body>\n    <input type=\"text\" id=\"newTaskInput\" placeholder=\"Enter a task\">\n    <button id=\"addTaskBtn\">Add Task</button>\n    <ul id=\"myList\"></ul>\n\n    <script src=\"script.js\"></script> <!-- Assuming your JS is in script.js -->\n</body>\n</html></code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 2: Select Necessary Elements</h3>\n        <p class=\"text-gray-600 mb-3\">In your JavaScript, select the input field, the add button, and the unordered list using their IDs.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const taskInput = document.getElementById(\"newTaskInput\");\nconst addTaskButton = document.getElementById(\"addTaskBtn\");\nconst taskList = document.getElementById(\"myList\");</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 3: Add Event Listener to the Button</h3>\n        <p class=\"text-gray-600 mb-3\">Add an event listener to the `addTaskButton` that listens for a 'click' event.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>if (addTaskButton) {\n  addTaskButton.addEventListener(\"click\", function() {\n    // Logic to add the task will go here\n  });\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 4: Get User Input</h3>\n        <p class=\"text-gray-600 mb-3\">Inside the button's click event listener, get the current value from the `taskInput` field.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>// Inside the event listener:\nconst taskText = taskInput.value;</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 5: Create a New List Item</h3>\n        <p class=\"text-gray-600 mb-3\">Create a new `<li>` element using `createElement`.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const newListItem = document.createElement(\"li\");</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 6: Set the Text of the New Item</h3>\n        <p class=\"text-gray-600 mb-3\">Set the `textContent` of the `newListItem` to the `taskText` you got from the input.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>if (newListItem) {\n  newListItem.textContent = taskText;\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 7: Append the New Item to the List</h3>\n        <p class=\"text-gray-600 mb-3\">Append the configured `newListItem` to the `taskList`.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>if (taskList && newListItem) {\n  taskList.appendChild(newListItem);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 8: Clear the Input Field</h3>\n        <p class=\"text-gray-600 mb-3\">After adding the task, clear the input field so the user can easily add the next one.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Set the `value` property of the input element to an empty string:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>if (taskInput) {\n  taskInput.value = \"\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 9: Handling Empty Input</h3>\n        <p class=\"text-gray-600 mb-3\">What should happen if the user clicks \"Add Task\" without typing anything in the input field?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> The script should ideally <strong>prevent adding an empty task</strong>. You can do this with an `if` statement checking if `taskText` is empty or only whitespace.\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>// Inside the event listener, before creating the new list item:\nif (taskText.trim() === \"\") {\n  // Optionally, show an alert or message to the user\n  alert(\"Please enter a task!\");\n  return; // Stop the function here\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 10: Adding a delete button to each item</h3>\n        <p class=\"text-gray-600 mb-3\">Modify the code so that each newly created `<li>` also has a \"Delete\" button. When this button is clicked, it should remove its parent `<li>`.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>// Inside the event listener, after creating the new list item:\nconst deleteButton = document.createElement(\"button\");\ndeleteButton.textContent = \"Delete\";\n// Add a class for styling or selection if needed\ndeleteButton.classList.add(\"delete-btn\");\n\n// Add an event listener to the delete button\ndeleteButton.addEventListener(\"click\", function() {\n  // 'this' refers to the deleteButton itself\n  // 'this.parentElement' refers to the <li> containing the button\n  this.parentElement.remove(); // Remove the parent <li>\n});\n\n// Append the button to the new list item\nif (newListItem) {\n  newListItem.appendChild(deleteButton);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 11: What event should you listen for if the script is in the `<head>`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You should listen for the <strong>`DOMContentLoaded`</strong> event. This ensures that the DOM is ready before your script tries to find elements like the input field, button, or list.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 12: Adding a class to the new list item</h3>\n        <p class=\"text-gray-600 mb-3\">When you create a new `<li>` element, add the class \"list-item\" to it using `classList.add()`.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>// After creating newListItem:\nif (newListItem) {\n  newListItem.classList.add(\"list-item\");\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n</div>\n<!--end-of-code-block-->",
  "video": null,
  "intros": "<div class=\"tabs-container\">\n    <h2 class=\"text-3xl font-extrabold text-gray-800 mb-6 mt-6 text-center\">Lesson 17: Practical Examples: Build a Dynamic List with JavaScript</h2>\n    <p class=\"text-gray-600 text-lg mb-8 text-center px-4\">We've covered the building blocks of the DOM. Now, let's put it all together to create something interactive and useful!</p>\n\n    <!-- Hidden radio buttons that control the state of the tabs -->\n    <input type=\"radio\" id=\"tab1\" name=\"tabs\" checked>\n    <input type=\"radio\" id=\"tab2\" name=\"tabs\">\n    <input type=\"radio\" id=\"tab3\" name=\"tabs\">\n    <input type=\"radio\" id=\"tab4\" name=\"tabs\">\n    <input type=\"radio\" id=\"tab5\" name=\"tabs\">\n\n    <!-- Tab Header Buttons (styled labels) - should be horizondal for both mobile and desktop -->\n    <div class=\"tabs-header flex flex-row bg-gray-50 border-b border-gray-200 text-sm font-medium text-center text-gray-600 rounded-t-lg overflow-hidden\">\n        <label for=\"tab1\" class=\"tab-label\" id=\"label1\" title=\"Intro 1: Your First Dynamic App\">1</label>\n        <label for=\"tab2\" class=\"tab-label\" id=\"label2\" title=\"Intro 2: Interactive To-Do List\">2</label>\n        <label for=\"tab3\" class=\"tab-label\" id=\"label3\" title=\"Intro 3: Building with JavaScript\">3</label>\n        <label for=\"tab4\" class=\"tab-label\" id=\"label4\" title=\"Intro 4: From Static to Dynamic\">4</label>\n        <label for=\"tab5\" class=\"tab-label\" id=\"label5\" title=\"Intro 5: Bringing it all Together\">5</label>\n    </div>\n\n    <!-- Tab Content Panels -->\n    <div class=\"tab-content-container p-6 sm:p-8\">\n        <!-- Tab 1 Content -->\n        <div class=\"tab-content content1\" id=\"content1\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 1: Your First Dynamic App</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Imagine creating a simple to-do list where you can add new tasks dynamically. What fundamental DOM skills would you need to build this?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- UI Elements -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">User Interface</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/> <!-- Input Field -->\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Input Field</text>\n                    <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/> <!-- Button -->\n                    <rect x=\"150\" y=\"480\" width=\"200\" height=\"50\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"250\" y=\"510\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Add Button</text>\n                    <!-- List -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-2=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">Dynamic List</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">List Item 1</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">List Item 2</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">JS Connects UI to DOM</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">Building a dynamic list involves several core DOM manipulation techniques you've learned: you'll need to select the parent `<ul>` or `<ol>`, create new `<li>` elements, set their content, and then append them to the list. You'll also need to handle user input from a text field and listen for events like button clicks. This lesson brings it all together in a practical, hands-on project.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">From zero to dynamic: Build your first interactive list!</p>\n            </div>\n        </div>\n        <!-- Tab 2 Content -->\n        <div class=\"tab-content content2\" id=\"content2\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 2: Interactive To-Do List</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Imagine a to-do list where you can type a task and click \"Add\" to see it appear in the list instantly. What are the key JavaScript steps to make this happen?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- UI -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">To-Do List UI</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Input field</text>\n                    <rect x=\"150\" y=\"300\" width=\"700\" height=\"50\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"330\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">Add Button</text>\n                    <rect x=\"150\" y=\"400\" width=\"700\" height=\"300\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"450\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">List: <ul></text>\n                    <rect x=\"150\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <!-- JS Logic -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JavaScript Logic</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">1. Get input value</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">2. Create new <li></text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\">3. Append <li> to <ul></text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">User Interaction Drives DOM Change</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">Building a dynamic to-do list involves several core DOM skills: getting input values, creating new elements (`<li>`), setting their content (`textContent`), and appending them to the parent list (`<ul>`) using `.appendChild()`. You'll also likely add event listeners to the \"Add\" button to trigger this process when clicked. This practical example ties together many concepts we've learned.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Build a functional app: Combine selection, creation, and manipulation!</p>\n            </div>\n        </div>\n        <!-- Tab 3 Content -->\n        <div class=\"tab-content content3\" id=\"content3\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 3: Building with JavaScript</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Imagine you're constructing a house virtually. What are the fundamental JavaScript tools you'd use to build new rooms (`<div>`), add furniture (`<p>`), and place them within the house structure?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- House Analogy -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Virtual House Building</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/> <!-- Room Blueprint -->\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Blueprint: Create 'div'</text>\n                    <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/> <!-- Furniture -->\n                    <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">Furniture: Add text to 'p'</text>\n                    <rect x=\"150\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                    <!-- JS Tools -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Construction Tools</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 1: createElement('div')</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 2: appendChild(newElement)</text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 3: prepend(newElement)</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Build & Place Elements</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">The core tools for dynamically building the DOM are `document.createElement('tagName')` to construct new elements, and then methods like `appendChild(newElement)` to add them as the last child of a parent, or `prepend(newElement)` to add them as the first child. By combining these, you can programmatically construct new parts of your web page and insert them into the existing structure.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Your DOM toolbox: Create, append, prepend!</p>\n            </div>\n        </div>\n        <!-- Tab 4 Content -->\n        <div class=\"tab-content content4\" id=\"content4\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 4: From Zero to Element</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">When you `createElement('div')`, what exactly is created, and how do you make it useful before adding it to the page?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Creation -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Creating an Element</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Step 1: `createElement('p')`</text>\n                    <!-- Configuration -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">Configuring the Element</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Set Text: `.textContent = \"...\"`</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">Set Attribute: `.href = \"...\"`</text>\n                    <!-- Insertion -->\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\">Append: `parentElement.appendChild(newElement)`</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Build Then Add</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">`document.createElement('tagName')` creates a new DOM node, but it's initially detached from the main document. To make it visible and functional, you first need to configure it by setting its text content, attributes, or classes using methods learned previously. Once the new element is ready, you can then insert it into the document using `appendChild()` or `prepend()`.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Create, configure, then insert!</p>\n            </div>\n        </div>\n        <!-- Tab 5 Content -->\n        <div class=\"tab-content content5\" id=\"content5\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 5: The DOM Construction Kit</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Think of JavaScript as providing a set of tools for building and placing elements. What are the core tools for creating, adding to the end, and adding to the beginning of a parent element?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Parent Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Parent Element</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/> <!-- Existing Child 1 -->\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Existing Child 1</text>\n                    <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/> <!-- Existing Child 2 -->\n                    <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">Existing Child 2</text>\n                    <!-- JS Tools -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Construction Kit</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 1: createElement('tag')</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 2: parent.appendChild(newElement)</text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\">Tool 3: parent.prepend(newElement)</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Assemble and Place</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">JavaScript provides the essential tools for building and modifying the DOM dynamically. `document.createElement('tagName')` allows you to create new elements. Once created, you can configure them (add text, attributes, classes) and then insert them into the document using `.appendChild(newNode)` to add them at the end of a parent's children, or `.prepend(newNode)` to add them at the beginning. These methods are fundamental for creating interactive lists, forms, or any dynamic content.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Build and place: Craft new DOM elements with JavaScript!</p>\n            </div>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->",
  "summary": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 17: Practical Examples: Build a Dynamic List with JavaScript</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Lesson Summary</h2>\n\n    <div class=\"summary-container bg-gray-50 p-6 rounded-lg shadow-md\">\n        <div class=\"flex flex-col lg:flex-row items-center lg:items-start gap-8 mb-8\">\n            <div class=\"lg:w-1/2\">\n                <h3 class=\"text-2xl font-bold text-gray-800 mb-4\">Creating Interactive Lists</h3>\n                <p class=\"text-gray-600 leading-relaxed mb-4\">\n                    Building a dynamic list, like a to-do list, is a practical application of many core DOM manipulation skills. It involves taking user input, creating new elements, configuring them, and inserting them into the page structure.\n                </p>\n                <p class=\"text-gray-600 leading-relaxed mb-4\">\n                    Key steps typically include: selecting the input field, button, and the list container; adding an event listener to the button; getting user input; creating new list items (`<li>`) with `createElement()`; setting their content (`textContent`); and finally appending them to the list using `appendChild()`. Error handling (like preventing empty inputs) and potentially adding features like deleting items are also important considerations.\n                </p>\n                <h4 class=\"text-xl font-semibold text-gray-700 mb-3\">Core Skills Applied:</h4>\n                <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                    <li>Element Selection (`getElementById`, `querySelector`)</li>\n                    <li>Event Handling (`addEventListener`)</li>\n                    <li>Getting User Input (`input.value`)</li>\n                    <li>Creating Elements (`createElement`)</li>\n                    <li>Setting Content (`textContent`)</li>\n                    <li>Appending Elements (`appendChild`)</li>\n                    <li>Basic Logic (e.g., checking for empty input)</li>\n                </ul>\n            </div>\n            <div class=\"lg:w-1/2 flex justify-center\">\n                <!-- SVG Illustration: Dynamic List Building -->\n                <svg class=\"h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"10\" fill=\"#F8F9FA\"/>\n                    <!-- UI Elements -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">User Interface</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Input Field</text>\n                    <rect x=\"150\" y=\"300\" width=\"200\" height=\"50\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"250\" y=\"330\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Add Button</text>\n                    <!-- Dynamic List -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">Dynamic List</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#A5D6A7\" stroke=\"#66BB6A\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#388E3C\">Item 1</text>\n                    <rect x=\"1100\" y=\"270\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"300\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Item 2</text>\n                    <rect x=\"1100\" y=\"340\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"390\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#BF360C\">New Item Added</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">User Input Drives DOM Changes</text>\n                </svg>\n            </div>\n        </div>\n\n        <div class=\"bg-violet-50 border-l-4 border-violet-500 text-violet-700 p-4 rounded-r-lg mb-6\" role=\"alert\">\n            <p class=\"font-bold\">Project Goal:</p>\n            <p>To build a functional to-do list application where users can add new tasks dynamically to an existing list using JavaScript.</p>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->"
}