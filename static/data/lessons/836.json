{
  "id": 836,
  "unit_id": 83,
  "title": "Lesson 9: Reading and Changing Element Content (textContent, innerText, innerHTML)",
  "slug": "lesson_9_reading_and_changing_element_content_textcontent_innertext_innerhtml",
  "content": "<div class=\"pt-6\">\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 9: Reading and Changing Element Content (textContent, innerText, innerHTML)</h1>\n    <p class=\"text-gray-600 text-lg mb-8 text-center px-4\">\n        You've found your elements! Now, let's dive into how to read their content and, more excitingly, how to change it dynamically with JavaScript.\n    </p>\n\n    <!-- Illustration: Different ways to access content -->\n    <div class=\"flex justify-center mb-8\">\n        <svg class=\"h-64 w-full max-w-2xl\" viewBox=\"0 0 1920 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"1920\" height=\"500\" rx=\"10\" fill=\"#F0F4F8\"/>\n            <!-- Element with Mixed Content -->\n            <rect x=\"100\" y=\"100\" width=\"800\" height=\"300\" rx=\"8\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n            <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"#E65100\">Element with Content</text>\n            <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n            <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Hello </text>\n            <rect x=\"500\" y=\"230\" width=\"100\" height=\"30\" rx=\"5\" fill=\"#E0E0E0\" stroke=\"#BDBDBD\" stroke-width=\"1\"/>\n            <text x=\"550\" y=\"250\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\"><strong>World</strong></text>\n            <rect x=\"150\" y=\"330\" width=\"700\" height=\"50\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-width=\"1\"/>\n            <text x=\"500\" y=\"360\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">(Hidden Text)</text>\n            <rect x=\"500\" y=\"350\" width=\"100\" height=\"20\" rx=\"2\" fill=\"#CCCCCC\"/> <!-- Hidden Span -->\n            <!-- JavaScript Tools -->\n            <rect x=\"1000\" y=\"100\" width=\"800\" height=\"300\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n            <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"#1976D2\">JS Content Tools</text>\n            <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n            <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">textContent</text>\n            <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n            <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">innerText</text>\n            <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n            <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">innerHTML</text>\n            <!-- Connection -->\n            <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n            <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n            <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Read & Write Content</text>\n        </svg>\n        <p class=\"intro-explanation text-gray-600 leading-relaxed\">Once you've selected an element, the most common task is to interact with its content. Whether you need to read the plain text, get the text as it's rendered on the page, or work with the underlying HTML structure, JavaScript offers powerful properties: `textContent`, `innerText`, and `innerHTML`. Understanding their differences is key to manipulating your web page accurately!</p>\n        <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Get or Set Content: Choose the right property for your text or HTML needs!</p>\n    </div>\n\n    <!-- Tab 2 Content -->\n    <div class=\"tab-content content2\" id=\"content2\">\n        <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 2: `textContent` vs. `innerText`</h3>\n        <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">When reading text content, what's the difference between `textContent` and `innerText`? Which one should you use and why?</h2>\n        <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n            <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                <!-- Element with Text and Hidden Content -->\n                <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Element with Text</text>\n                <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n                <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">This is visible text.</text>\n                <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-width=\"1\"/>\n                <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">This text is </text>\n                <rect x=\"500\" y=\"330\" width=\"100\" height=\"30\" rx=\"5\" fill=\"#E0E0E0\" stroke=\"#BDBDBD\" stroke-width=\"1\"/>\n                <text x=\"550\" y=\"350\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">hidden</text>\n                <rect x=\"500\" y=\"350\" width=\"100\" height=\"20\" rx=\"2\" fill=\"#CCCCCC\"/> <!-- Hidden Span -->\n                <rect x=\"150\" y=\"480\" width=\"700\" height=\"50\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"510\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">Also this text. </text>\n                <!-- JS Results -->\n                <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">Property Results</text>\n                <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">textContent: \"This is visible text. This text is hidden. Also this text.\"</text>\n                <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">innerText: \"This is visible text. Also this text.\" (Hides \"hidden\" content)</text>\n                <!-- Connection -->\n                <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Read Text Differently</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">When reading text content, `.textContent` grabs all the raw text, including that inside hidden elements or within `<script>`/`<style>` tags, and preserves whitespace and line breaks. `.innerText`, on the other hand, tries to get the text as it's visually rendered on the page â€“ it ignores hidden elements and approximates layout, including line breaks and spacing. For most simple text reading, `.textContent` is generally preferred for its performance and predictability.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">textContent for raw text, innerText for rendered text.</p>\n            </div>\n        </div>\n        <!-- Tab 3 Content -->\n        <div class=\"tab-content content3\" id=\"content3\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 3: Reading and Writing Content</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">How do you use these properties to not only read the current content but also to replace it with something new?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Target Element</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n                    <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Current Text</text>\n                    <!-- JavaScript Actions -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Actions</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Read: const current = element.textContent;</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Write: element.textContent = \"New Text\";</text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Write HTML: element.innerHTML = \"<b>New HTML</b>\";</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Read and Rewrite</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">These properties work for both reading and writing. To read, you simply access the property (e.g., `element.textContent`). To write or change the content, you assign a new string value to the property (e.g., `element.textContent = \"New content\"`). This allows you to dynamically update the text or HTML of any element on your page based on user interactions or other conditions.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Get the current content or replace it entirely!</p>\n            </div>\n        </div>\n        <!-- Tab 4 Content -->\n        <div class=\"tab-content content4\" id=\"content4\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 4: The Inner Workings of Content</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">What happens behind the scenes when you use `textContent`, `innerText`, or `innerHTML`? What are the key differences to watch out for?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Element with Mixed Content -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Element Details</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n                    <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Raw Text: \"Hello World\"</text>\n                    <rect x=\"150\" y=\"330\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-width=\"1\"/>\n                    <text x=\"500\" y=\"380\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">Rendered Text: \"Hello World\"</text>\n                    <rect x=\"150\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">HTML Content: \"Hello <b>World</b>\"</text>\n                    <!-- JS Interpretation -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Interpretation</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">textContent: Reads Raw Text</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">innerText: Reads Rendered Text (ignores hidden)</text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">innerHTML: Reads/Writes Full HTML</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Understand the Behavior</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">`.textContent` focuses on the raw text, stripping out all HTML tags and respecting whitespace. `.innerText` also deals with text but is aware of CSS styling â€“ it won't return text from hidden elements and tries to honor line breaks and spacing as displayed. `.innerHTML` is the most powerful (and potentially dangerous) as it reads or writes the full HTML markup inside an element. Be cautious when setting `innerHTML` with user-provided content, as it can lead to security vulnerabilities.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">textContent = raw text; innerText = rendered text; innerHTML = the full markup!</p>\n            </div>\n        </div>\n        <!-- Tab 5 Content -->\n        <div class=\"tab-content content5\" id=\"content5\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 5: Reading and Rewriting</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">Once you've selected an element, how do you actually get its content or replace it with new text or HTML?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Selected Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Selected Element</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n                    <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Current Content</text>\n                    <!-- JavaScript Actions -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Actions</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Read: const text = element.textContent;</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Write: element.textContent = \"New plain text\";</text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Write HTML: element.innerHTML = \"<p>New <b>HTML</b></p>\";</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Read and Update</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">To read the content, you simply access the property: `element.textContent`, `element.innerText`, or `element.innerHTML`. To change it, you assign a new string value to that property. For example, `element.textContent = \"New Text\"` will update the plain text. Be very careful when using `innerHTML` to set content, especially if it comes from user input, as it can execute malicious scripts if not properly sanitized.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Get or Set: Manipulate element content with precision.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->",
  "questions": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 9: Reading and Changing Element Content (textContent, innerText, innerHTML)</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Test Your Knowledge of Content Manipulation!</h2>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 1: What does `textContent` do?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It gets or sets the <strong>raw text content</strong> of an element and its descendants, ignoring HTML tags and CSS rendering.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 2: What does `innerText` do?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It gets or sets the <strong>rendered text content</strong> of an element. It's aware of CSS styling (like hidden elements) and approximates the layout, including line breaks and spacing.\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Element with Hidden Content -->\n                    <rect x=\"50\" y=\"100\" width=\"500\" height=\"150\" rx=\"8\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"300\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Content: Text A</text>\n                    <rect x=\"300\" y=\"150\" width=\"100\" height=\"20\" rx=\"2\" fill=\"#CCCCCC\"/> <!-- Hidden Span -->\n                    <text x=\"300\" y=\"180\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">Hidden Text B</text>\n                    <rect x=\"150\" y=\"180\" width=\"300\" height=\"50\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-width=\"1\"/>\n                    <text x=\"300\" y=\"210\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#424242\">Text C</text>\n                    <!-- JS Results -->\n                    <rect x=\"350\" y=\"50\" width=\"200\" height=\"120\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"85\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">textContent: \"Text A Hidden Text B Text C\"</text>\n                    <rect x=\"350\" y=\"140\" width=\"200\" height=\"120\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"175\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">innerText: \"Text A Text C\"</text>\n                    <text x=\"450\" y=\"200\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">(Ignores hidden content)</text>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 3: What does `innerHTML` do?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It gets or sets the <strong>full HTML markup</strong> inside an element, including nested tags.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 4: Which property should you use if you want to insert HTML tags like `<strong>` or `<em>` into an element's content?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You should use <strong>`.innerHTML`</strong>, as it preserves and interprets HTML tags.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 5: What's the main difference between `textContent` and `innerHTML` when reading content?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> `textContent` gets only the raw text, ignoring HTML tags. `innerHTML` gets the full HTML markup, including tags.\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Element with HTML -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"100\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">HTML: <b>Bold</b> Text</text>\n                    <!-- JS Results -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">textContent: \"Bold Text\"</text>\n                    <rect x=\"350\" y=\"180\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"210\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#424242\">innerHTML: \"<b>Bold</b> Text\"</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                    <text x=\"350\" y=\"145\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#33691E\">Difference is HTML tags</text>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 6: When might `innerText` be more suitable than `textContent`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> When you need to retrieve the text exactly as it appears on the screen, considering CSS styling like hidden elements or line breaks, `innerText` is more appropriate.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 7: What is a potential security risk when using `innerHTML`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> If you set `innerHTML` with untrusted user input, it can lead to <strong>Cross-Site Scripting (XSS)</strong> vulnerabilities, as malicious HTML or scripts could be injected.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 8: How would you set the text content of a paragraph with the ID \"myPara\" to \"Hello World!\"?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const pElement = document.getElementById(\"myPara\");\nif (pElement) {\n  pElement.textContent = \"Hello World!\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 9: How would you insert a bolded \"Important!\" message into a div with the ID \"messageBox\"?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You would use `innerHTML`:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const messageBox = document.getElementById(\"messageBox\");\nif (messageBox) {\n  messageBox.innerHTML = \"Important!\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 10: If an element contains nested elements, which property reads only the text from all of them, ignoring the tags?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> That would be <strong>`.textContent`</strong>.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 11: Which property is generally faster for reading text content: `textContent` or `innerText`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> <strong>`.textContent`</strong> is generally faster because it doesn't need to consider CSS rendering or layout.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 12: What is the primary difference when *setting* content using `textContent` versus `innerHTML`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Setting `textContent` treats the input as plain text, stripping out any HTML tags. Setting `innerHTML` interprets the input as HTML, rendering any tags provided.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 13: If an element has `display: none;` via CSS, how would `textContent` and `innerText` differ in reading its content?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> `textContent` would still read the text content of the hidden element. `innerText`, however, would likely ignore it because `innerText` is aware of CSS rendering and the element is not visually present.\n            </p>\n        </div>\n    </div>\n\n</div>\n<!--end-of-code-block-->",
  "display_order": 9,
  "created_at": "2025-06-29 16:06:33",
  "updated_at": "2025-07-01 02:06:31",
  "exercises": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 9: Reading and Changing Element Content (textContent, innerText, innerHTML)</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Let's Practice Manipulating Content!</h2>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 1: Get Plain Text</h3>\n        <p class=\"text-gray-600 mb-3\">Given the HTML below, write the JavaScript to get only the plain text content of the `div` with ID \"myContent\".</p>\n        <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code><div id=\"myContent\">Hello <strong>World</strong>! This is text.</div></code></pre>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const contentDiv = document.getElementById(\"myContent\");\nif (contentDiv) {\n  const plainText = contentDiv.textContent;\n  console.log(plainText); // Output: \"Hello World! This is text.\" (Note: whitespace might vary)\n}</code></pre>\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Element -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"100\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">HTML: <div id=\"myContent\">Hello <strong>World</strong>! This is text.</div></text>\n                    <!-- JS Result -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS Result (textContent):</text>\n                    <text x=\"450\" y=\"155\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">\"Hello World! This is text.\"</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 2: Get Rendered Text</h3>\n        <p class=\"text-gray-600 mb-3\">Consider an element with the ID \"hiddenInfo\" that contains text inside a hidden `<span>`. Which property, `textContent` or `innerText`, would likely return the text from the hidden span?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> <strong>`textContent`</strong> would likely include the text from the hidden span, as it reads all text nodes regardless of rendering. `innerText` would probably ignore it.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 3: Get HTML Content</h3>\n        <p class=\"text-gray-600 mb-3\">Write the JavaScript to get the full HTML content of the `div` with ID \"article-body\".</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const articleBody = document.getElementById(\"article-body\");\nif (articleBody) {\n  const htmlContent = articleBody.innerHTML;\n  console.log(htmlContent);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 4: Change Text Content</h3>\n        <p class=\"text-gray-600 mb-3\">You've selected a paragraph element into a variable `myParagraph`. Change its text content to \"JavaScript updated this!\".</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>if (myParagraph) {\n  myParagraph.textContent = \"JavaScript updated this!\";\n}</code></pre>\n                (You could also use `innerText` here if preferred for rendered text).\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 5: Insert New HTML</h3>\n        <p class=\"text-gray-600 mb-3\">You have a `div` with ID \"output\". Change its content to display \"This is important!\" in bold.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You should use `innerHTML` for this:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const outputDiv = document.getElementById(\"output\");\nif (outputDiv) {\n  outputDiv.innerHTML = \"<b>Important!</b>\";\n}</code></pre>\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Target Element -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"80\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">HTML: <div id=\"output\">...</div></text>\n                    <!-- JS Code -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"120\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: outputDiv.innerHTML =</text>\n                    <text x=\"450\" y=\"155\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">\"<b>Important!</b>\";</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 5: Replacing Content Safely</h3>\n        <p class=\"text-gray-600 mb-3\">You need to display user-submitted text in a paragraph. Which property (`textContent`, `innerText`, or `innerHTML`) is the safest to use for this, and why?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> <strong>`textContent`</strong> is the safest. It prevents the user's input from being interpreted as HTML or scripts, avoiding potential Cross-Site Scripting (XSS) attacks.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 6: Reading `innerHTML`</h3>\n        <p class=\"text-gray-600 mb-3\">What would `myElement.innerHTML` return if `myElement` contains `<p>Hello <b>there</b></p>`?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It would return the string:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>\"<p>Hello <b>there</b></p>\"</code></pre>\n                (The exact whitespace might vary slightly depending on the browser's rendering of the DOM).\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 7: Overwriting Content</h3>\n        <p class=\"text-gray-600 mb-3\">If an element currently has text content \"Old Text\", and you set `element.textContent = \"New Text\";`, what will be the new content?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> The new content will be exactly <strong>\"New Text\"</strong>. The original text is completely replaced.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 8: Setting HTML Content</h3>\n        <p class=\"text-gray-600 mb-3\">How would you set the content of a `div` with ID \"result\" to display the word \"Success!\" in green, bold text?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Using `innerHTML`:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const resultDiv = document.getElementById(\"result\");\nif (resultDiv) {\n  resultDiv.innerHTML = \"<strong style='color: green;'>Success!</strong>\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 9: Reading `textContent` with nested tags</h3>\n        <p class=\"text-gray-600 mb-3\">If an element contains `Hello <span>World</span>`, what will `element.textContent` return?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It will return the string <strong>\"Hello World\"</strong> (with potentially some whitespace variations). It strips out the `<span>` tag.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 10: Reading `innerText` with invisible elements</h3>\n        <p class=\"text-gray-600 mb-3\">If an element contains `Visible Text` and then a hidden `<span>Hidden Text</span>` (via `display: none;`), what will `element.innerText` return?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> `innerText` will likely return only <strong>\"Visible Text\"</strong> because it respects CSS rendering and ignores content that isn't displayed.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 11: Setting `textContent` vs. `innerHTML`</h3>\n        <p class=\"text-gray-600 mb-3\">You want to display the word \"IMPORTANT\" in bold. Which property, `textContent` or `innerHTML`, should you use for setting it, and why?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You should use <strong>`innerHTML`</strong>. If you used `textContent`, the browser would display the literal string \"<b>IMPORTANT</b>\" instead of rendering it as bold text.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 12: Security Consideration with `innerHTML`</h3>\n        <p class=\"text-gray-600 mb-3\">Why is it dangerous to set `innerHTML` directly with user-provided text?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It's dangerous because the browser interprets the string as HTML. If the user input contains malicious `<script>` tags or other executable code, it can be executed, leading to <strong>Cross-Site Scripting (XSS)</strong> vulnerabilities.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 13: Getting the text content of a specific element</h3>\n        <p class=\"text-gray-600 mb-3\">Select the paragraph with ID \"user-message\" and log its `textContent` to the console.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const userMessage = document.getElementById(\"user-message\");\nif (userMessage) {\n  console.log(userMessage.textContent);\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 14: When to use `textContent`</h3>\n        <p class=\"text-gray-600 mb-3\"> You want to display a user's name, which might contain special characters like `<` or `>`. Should you use `textContent` or `innerHTML` to display it safely? </p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You should use <strong>`textContent`</strong>. This will ensure that any special characters like `<` or `>` are displayed literally rather than being interpreted as HTML tags.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 15: Setting content to an empty string</h3>\n        <p class=\"text-gray-600 mb-3\">How would you clear the content of a `div` with the ID \"status-message\" so it becomes empty?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You can set any of the content properties to an empty string:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const statusDiv = document.getElementById(\"status-message\");\nif (statusDiv) {\n  statusDiv.textContent = \"\"; // or innerText = \"\"; or innerHTML = \"\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n</div>\n<!--end-of-code-block-->",
  "video": null,
  "intros": "<div class=\"tabs-container\">\n    <h2 class=\"text-3xl font-extrabold text-gray-800 mb-6 mt-6 text-center\">Lesson 8: Traversing the DOM (Parent, Child, Siblings)</h2>\n    <p class=\"text-gray-600 text-lg mb-8 text-center px-4\">Learn to navigate the family tree of web elements like a digital explorer</p>                   \n\n    <div class=\"tab-content-container p-6 sm:p-8\">\n        <div class=\"tab-content content1\" id=\"content1\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">DOM Family Relationships</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">What if every element on a webpage had family connections you could explore?</h2>\n            \n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <!-- 16:9 Aspect Ratio SVG -->\n                <div class=\"w-full max-w-4xl mx-auto mb-6\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 800 450\" class=\"w-full h-auto bg-white rounded-lg\">\n                        <!-- Main Container -->\n                        <rect x=\"50\" y=\"30\" width=\"700\" height=\"390\" fill=\"#F3F4F6\" stroke=\"#D1D5DB\" stroke-width=\"2\" rx=\"4\"/>\n                        \n                        <!-- DOM Tree Structure -->\n                        <!-- Grandparent -->\n                        <rect x=\"350\" y=\"60\" width=\"100\" height=\"50\" rx=\"4\" fill=\"#BFDBFE\" stroke=\"#3B82F6\" stroke-width=\"2\"/>\n                        <text x=\"400\" y=\"90\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#1E40AF\">body</text>\n                        <text x=\"400\" y=\"110\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#4B5563\">(Grandparent)</text>\n                        \n                        <!-- Parent -->\n                        <rect x=\"300\" y=\"140\" width=\"200\" height=\"50\" rx=\"4\" fill=\"#BFDBFE\" stroke=\"#3B82F6\" stroke-width=\"2\"/>\n                        <text x=\"400\" y=\"170\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#1E40AF\">div#container</text>\n                        <text x=\"400\" y=\"190\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#4B5563\">(Parent)</text>\n                        \n                        <!-- Children -->\n                        <rect x=\"180\" y=\"220\" width=\"120\" height=\"40\" rx=\"4\" fill=\"#A7F3D0\" stroke=\"#10B981\" stroke-width=\"2\"/>\n                        <text x=\"240\" y=\"245\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#065F46\">h1</text>\n                        <text x=\"240\" y=\"265\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#4B5563\">(First Child)</text>\n                        \n                        <rect x=\"350\" y=\"220\" width=\"120\" height=\"40\" rx=\"4\" fill=\"#FDE68A\" stroke=\"#F59E0B\" stroke-width=\"2\"/>\n                        <text x=\"410\" y=\"245\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#92400E\">p</text>\n                        <text x=\"410\" y=\"265\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#4B5563\">(Middle Child)</text>\n                        \n                        <rect x=\"520\" y=\"220\" width=\"120\" height=\"40\" rx=\"4\" fill=\"#FECACA\" stroke=\"#EF4444\" stroke-width=\"2\"/>\n                        <text x=\"580\" y=\"245\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#B91C1C\">button</text>\n                        <text x=\"580\" y=\"265\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#4B5563\">(Last Child)</text>\n                        \n                        <!-- Grandchildren -->\n                        <rect x=\"200\" y=\"300\" width=\"80\" height=\"30\" rx=\"4\" fill=\"#A7F3D0\" stroke=\"#10B981\" stroke-width=\"1\" opacity=\"0.8\"/>\n                        <text x=\"240\" y=\"320\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#065F46\">span</text>\n                        \n                        <rect x=\"370\" y=\"300\" width=\"80\" height=\"30\" rx=\"4\" fill=\"#FDE68A\" stroke=\"#F59E0B\" stroke-width=\"1\" opacity=\"0.8\"/>\n                        <text x=\"410\" y=\"320\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#92400E\">em</text>\n                        \n                        <rect x=\"540\" y=\"300\" width=\"80\" height=\"30\" rx=\"4\" fill=\"#FECACA\" stroke=\"#EF4444\" stroke-width=\"1\" opacity=\"0.8\"/>\n                        <text x=\"580\" y=\"320\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#B91C1C\">i</text>\n                        \n                        <!-- Connection Lines -->\n                        <!-- Grandparent to Parent -->\n                        <line x1=\"400\" y1=\"110\" x2=\"400\" y2=\"140\" stroke=\"#3B82F6\" stroke-width=\"2\"/>\n                        \n                        <!-- Parent to Children -->\n                        <line x1=\"300\" y1=\"165\" x2=\"240\" y2=\"220\" stroke=\"#3B82F6\" stroke-width=\"2\"/>\n                        <line x1=\"400\" y1=\"165\" x2=\"400\" y2=\"220\" stroke=\"#3B82F6\" stroke-width=\"2\"/>\n                        <line x1=\"500\" y1=\"165\" x2=\"560\" y2=\"220\" stroke=\"#3B82F6\" stroke-width=\"2\"/>\n                        \n                        <!-- Children to Grandchildren -->\n                        <line x1=\"240\" y1=\"260\" x2=\"240\" y2=\"300\" stroke=\"#10B981\" stroke-width=\"1\" opacity=\"0.8\"/>\n                        <line x1=\"410\" y1=\"260\" x2=\"410\" y2=\"300\" stroke=\"#F59E0B\" stroke-width=\"1\" opacity=\"0.8\"/>\n                        <line x1=\"580\" y1=\"260\" x2=\"580\" y2=\"300\" stroke=\"#EF4444\" stroke-width=\"1\" opacity=\"0.8\"/>\n                        \n                        <!-- Sibling Connections -->\n                        <path d=\"M 300 240 L 340 240 L 340 200 L 460 200 L 460 240 L 500 240\" fill=\"none\" stroke=\"#8B5CF6\" stroke-width=\"2\" stroke-dasharray=\"5,5\"/>\n                        \n                        <!-- Navigation Arrows -->\n                        <path d=\"M 400 100 L 390 110 L 410 110 Z\" fill=\"#3B82F6\"/>\n                        <text x=\"370\" y=\"125\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#1E40AF\">parentNode</text>\n                        \n                        <path d=\"M 240 170 L 230 160 L 230 180 Z\" fill=\"#10B981\"/>\n                        <path d=\"M 410 170 L 420 160 L 420 180 Z\" fill=\"#F59E0B\"/>\n                        <path d=\"M 580 170 L 570 160 L 570 180 Z\" fill=\"#EF4444\"/>\n                        <text x=\"400\" y=\"155\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#6D28D9\">children</text>\n                        \n                        <path d=\"M 300 240 L 280 240 L 280 260 L 260 260\" fill=\"none\" stroke=\"#8B5CF6\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\"/>\n                        <path d=\"M 500 240 L 520 240 L 520 260 L 540 260\" fill=\"none\" stroke=\"#8B5CF6\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\"/>\n                        <text x=\"400\" y=\"280\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#6D28D9\">siblings</text>\n                        \n                        <!-- JavaScript Console -->\n                        <rect x=\"100\" y=\"350\" width=\"600\" height=\"50\" fill=\"#F0FDF4\" stroke=\"#10B981\" rx=\"4\"/>\n                        <text x=\"400\" y=\"370\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#065F46\">element.parentNode</text>\n                        <text x=\"400\" y=\"395\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#065F46\">element.children | element.nextSibling</text>\n                        \n                        <!-- Explorer Character -->\n                        <circle cx=\"650\" cy=\"100\" r=\"20\" fill=\"#FDE68A\" stroke=\"#F59E0B\" stroke-width=\"2\"/>\n                        <path d=\"M 650 120 L 650 160 L 640 180 L 660 180 Z\" fill=\"#3B82F6\"/>\n                        <path d=\"M 630 100 L 620 90 L 670 90 L 680 100\" fill=\"#EF4444\"/>\n                        <path d=\"M 640 140 L 630 150\" stroke=\"#4B5563\" stroke-width=\"2\"/>\n                        <path d=\"M 660 140 L 670 150\" stroke=\"#4B5563\" stroke-width=\"2\"/>\n                    </svg>\n                </div>\n                \n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">\n                    Imagine every element on a webpage is part of a big family tree! Just like in human families, HTML elements have parents (elements that contain them), children (elements inside them), and siblings (elements at the same level). Traversing the DOM means moving between these family members using JavaScript.\n                </p>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed mt-4\">\n                    With just a few simple commands, you can climb up to parent elements, dive down to child elements, or move sideways to sibling elements. It's like having a map that helps you navigate anywhere in a webpage's structure - essential for finding and modifying elements that don't have IDs or classes!\n                </p>                \n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">\n                    \"Become a DOM explorer - when you know family relationships, you never get lost in the webpage jungle!\"\n                </p>\n            </div> \n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->",
  "summary": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 9: Reading and Changing Element Content (textContent, innerText, innerHTML)</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Lesson Summary</h2>\n\n    <div class=\"summary-container bg-gray-50 p-6 rounded-lg shadow-md\">\n        <div class=\"flex flex-col lg:flex-row items-center lg:items-start gap-8 mb-8\">\n            <div class=\"lg:w-1/2\">\n                <h3 class=\"text-2xl font-bold text-gray-800 mb-4\">Manipulating Element Content</h3>\n                <p class=\"text-gray-600 leading-relaxed mb-4\">\n                    Once an element is selected, interacting with its content is a fundamental task. JavaScript provides three key properties: `textContent`, `innerText`, and `innerHTML` for both reading and changing the content within an element.\n                </p>\n                <p class=\"text-gray-600 leading-relaxed mb-4\">\n                    Understanding the differences between these properties is crucial for accurate and secure web manipulation. `textContent` for raw text, `innerText` for rendered text, and `innerHTML` for full HTML markup.\n                </p>\n                <h4 class=\"text-xl font-semibold text-gray-700 mb-3\">Key Properties:</h4>\n                <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                    <li><strong>`.textContent`</strong>: Gets/sets raw text, ignoring HTML and CSS rendering. Faster and safer for plain text.</li>\n                    <li><strong>`.innerText`</strong>: Gets/sets rendered text, considering CSS (like hidden elements) and layout. Slower due to rendering calculation.</li>\n                    <li><strong>`.innerHTML`</strong>: Gets/sets the full HTML markup within an element. Powerful but requires caution due to security risks (XSS).</li>\n                </ul>\n            </div>\n            <div class=\"lg:w-1/2 flex justify-center\">\n                <!-- SVG Illustration: Content Manipulation -->\n                <svg class=\"h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"10\" fill=\"#F8F9FA\"/>\n                    <!-- Element Box -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Element Box</text>\n                    <!-- Content Types -->\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">textContent: \"Hello World\"</text>\n                    <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">innerText: \"Hello World\"</text>\n                    <rect x=\"150\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">innerHTML: \"Hello <b>World</b>\"</text>\n                    <!-- JS Tools -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Properties</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Read/Write Text</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Read/Write Rendered Text</text>\n                    <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Read/Write HTML Markup</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Choose Wisely!</text>\n                </svg>\n            </div>\n        </div>\n\n        <div class=\"bg-green-50 border-l-4 border-green-500 text-green-700 p-4 rounded-r-lg mb-6\" role=\"alert\">\n            <p class=\"font-bold\">Key Takeaways:</p>\n            <p>Use `textContent` for plain text, `innerText` for text considering rendering, and `innerHTML` for HTML markup. Be mindful of security when using `innerHTML` with user input.</p>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->"
}