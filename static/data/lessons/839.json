{
  "id": 839,
  "unit_id": 83,
  "title": "Lesson 12: Styling Elements with style Property",
  "slug": "lesson_12_styling_elements_with_style_property",
  "content": "<div class=\"pt-6\">\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 12: Styling Elements with style Property</h1>\n    <p class=\"text-gray-600 text-lg mb-8 text-center px-4\">\n        You've learned about content and attributes. Now, let's directly manipulate the visual appearance of elements using JavaScript!\n    </p>\n\n    <!-- Illustration: Direct style manipulation -->\n    <div class=\"flex justify-center mb-8\">\n        <svg class=\"h-64 w-full max-w-2xl\" viewBox=\"0 0 1920 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"1920\" height=\"500\" rx=\"10\" fill=\"#F0F4F8\"/>\n            <!-- Element -->\n            <rect x=\"100\" y=\"100\" width=\"800\" height=\"300\" rx=\"8\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n            <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"#E65100\">Target Element</text>\n            <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-width=\"1\"/>\n            <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Current Style: color: black;</text>\n            <!-- JavaScript Styling -->\n            <rect x=\"1000\" y=\"100\" width=\"800\" height=\"300\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n            <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"#1976D2\">JavaScript Styling</text>\n            <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n            <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Change color: element.style.color = \"red\";</text>\n            <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n            <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Change margin: element.style.marginLeft = \"20px\";</text>\n            <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n            <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Set font size: element.style.fontSize = \"1.5em\";</text>\n            <!-- Connection -->\n            <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n            <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n            <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Direct Style Manipulation</text>\n        </svg>\n        <p class=\"intro-explanation text-gray-600 leading-relaxed\">You can directly access and modify an element's inline styles using the `.style` property in JavaScript. This property provides access to individual CSS properties, allowing you to change an element's appearance dynamically. Think of it like directly editing the `style=\"...\"` attribute of an HTML tag.</p>\n        <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Control appearance: Manipulate styles directly with JavaScript!</p>\n    </div>\n\n    <!-- Tab 2 Content -->\n    <div class=\"tab-content content2\" id=\"content2\">\n        <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 2: The `style` Object</h3>\n        <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">What is the `.style` property, and how does it let you control specific CSS properties like color or font size?</h2>\n        <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n            <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                <!-- Element -->\n                <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Target Element</text>\n                <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Current Style: color: black;</text>\n                <!-- JS Style Object -->\n                <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">The `style` Object</text>\n                <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Access properties like:</text>\n                <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">`color`</text>\n                <text x=\"1450\" y=\"375\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">`backgroundColor`</text>\n                <text x=\"1450\" y=\"400\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">`fontSize`</text>\n                <rect x=\"1100\" y=\"480\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFAB91\" stroke=\"#FF7043\" stroke-1=\"1\"/>\n                <text x=\"1450\" y=\"530\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Note camelCase: `marginLeft`, `fontSize`</text>\n                <!-- Connection -->\n                <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Direct Access to Styles</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">The `.style` property is an object that exposes all inline style properties of an element. These properties correspond to CSS styles, but with a JavaScript-friendly naming convention: CSS properties with hyphens (like `background-color`) are converted to camelCase in JavaScript (like `backgroundColor`). This object allows you to directly read or set these styles.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">`.style` is your gateway to manipulating inline styles.</p>\n            </div>\n        </div>\n        <!-- Tab 3 Content -->\n        <div class=\"tab-content content3\" id=\"content3\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 3: Inline Styles via JavaScript</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">What exactly happens when you write `element.style.property = 'value'`? Where does this style information get applied?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">HTML Element</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Original: <p>Hello</p></text>\n                    <!-- JavaScript Action -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Action</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">p.style.color = \"red\";</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Result: <p style=\"color: red;\">Hello</p></text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Applies Inline Style</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">When you set a style property via JavaScript (e.g., `element.style.color = 'blue'`), you are directly adding or modifying the element's inline `style` attribute. This is different from changing classes, as it applies specific styles directly to that element, often overriding styles from stylesheets due to its high specificity.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Direct style manipulation adds rules to the `style` attribute.</p>\n            </div>\n        </div>\n        <!-- Tab 4 Content -->\n        <div class=\"tab-content content4\" id=\"content4\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 4: Changing Styles Dynamically</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">How can JavaScript change an element's appearance based on user actions, like making a button red when clicked?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Button Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Target Button</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"50\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Default Style</text>\n                    <!-- JavaScript Action -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Interaction</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">On Click:</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Change Style: button.style.backgroundColor = \"red\";</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Real-time Visual Changes</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">JavaScript's `.style` property allows you to directly manipulate inline styles. This is perfect for applying styles dynamically in response to events. For example, when a user clicks a button, you can change its `backgroundColor` or `color` property. It's a direct way to control the visual presentation of elements as your page interacts with the user.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Make elements react: Change styles dynamically!</p>\n            </div>\n        </div>\n        <!-- Tab 5 Content -->\n        <div class=\"tab-content content5\" id=\"content5\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Intro 5: When to Use Inline Styles</h3>\n            <h2 class=\"text-2xl font-bold text-gray-900 mb-4\">While `.style` is powerful, is it always the best way to style elements? When should you prefer CSS classes instead?</h2>\n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <svg class=\"mx-auto h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"8\" fill=\"#F0F4F8\"/>\n                    <!-- Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Element Styling</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Inline Style: style=\"...\"</text>\n                    <rect x=\"150\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#CFD8DC\" stroke=\"#90A4AE\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#424242\">CSS Class: .active { ... }</text>\n                    <!-- JavaScript Tools -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Control</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">Directly sets inline style</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">Adds/Removes/Toggles classes</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Inline vs. Class-based Styling</text>\n                </svg>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">While `.style` is great for dynamic, one-off style changes, it's generally better to manage styles using CSS classes whenever possible. Classes keep your styles organized in your CSS files, are easier to reuse, and separate concerns (styling vs. behavior). Use `.style` for dynamic changes that depend on user interaction or application state, and classes for the general look and feel.</p>\n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">Use classes for structure, `.style` for dynamic tweaks.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->",
  "questions": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 12: Styling Elements with style Property</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Test Your Styling Knowledge!</h2>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 1: What JavaScript property do you use to directly access and modify an element's inline styles?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You use the <strong>`.style`</strong> property of the DOM element.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 2: How do CSS properties with hyphens translate to JavaScript when using the `.style` property?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> They are converted to <strong>camelCase</strong>. For example, `background-color` becomes `backgroundColor`, and `font-size` becomes `fontSize`.\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- JS Code -->\n                    <rect x=\"50\" y=\"100\" width=\"500\" height=\"150\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"300\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">CSS: background-color: red;</text>\n                    <text x=\"300\" y=\"160\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: element.style.backgroundColor = \"red\";</text>\n                    <text x=\"300\" y=\"200\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">CSS: margin-left: 10px;</text>\n                    <text x=\"300\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: element.style.marginLeft = \"10px\";</text>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 3: How do you set the text color of an element to blue using JavaScript?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.color = \"blue\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 4: How do you set the font size of an element to 16 pixels?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You need to provide the value with its unit:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.fontSize = \"16px\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 5: What does `element.style.display = 'none';` achieve?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It hides the element from view, effectively removing it from the page layout. To show it again, you would set `element.style.display = 'block'` (or another appropriate value).\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 6: Where are the styles applied using `element.style` stored?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> They are stored directly in the element's <strong>inline `style` attribute</strong> in the HTML.\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- HTML Element -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"100\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">HTML: <p>Hello</p></text>\n                    <!-- JS Action -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: p.style.color = \"red\";</text>\n                    <!-- Resulting HTML -->\n                    <rect x=\"50\" y=\"180\" width=\"250\" height=\"100\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"175\" y=\"210\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">Resulting HTML:</text>\n                    <text x=\"175\" y=\"235\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\"><p style=\"color: red;\">Hello</p></text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                    <text x=\"350\" y=\"145\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#33691E\">Inline Style Added</text>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 7: What is the risk of applying many styles directly using `.style`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It can lead to <strong>inline styles overriding</strong> styles defined in your CSS files due to higher specificity, making it harder to manage styles globally. It also mixes presentation logic with behavior logic, which is generally discouraged for maintainability.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 8: How would you set the background color of a div to yellow?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Using the `style` property with camelCase:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.backgroundColor = \"yellow\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 9: What does `element.style.display = 'none'` do?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It hides the element by setting its display property to `none`, effectively removing it from the layout.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 10: How can you read a style that was set inline using `setAttribute` (e.g., `style=\"color: blue;\"`)?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You can use `getAttribute`:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const elementStyleString = element.getAttribute(\"style\"); // Gets the entire style string</code></pre>\n                However, to read *individual* styles set inline (like `color`), you should use the `.style` property:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const elementColor = element.style.color; // Gets the inline color value if set via JS</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 11: Is it better to manipulate styles via `.style` or by adding/removing CSS classes?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Generally, it's better to manage styles using <strong>CSS classes</strong> (via `classList`) for maintainability, reusability, and separation of concerns. Use `.style` for dynamic changes that are hard to represent with classes or depend directly on script logic.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 12: What would `element.style.color` return if the color was set in a CSS stylesheet but not inline?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It would likely return an <strong>empty string (`\"\"`)</strong> because `element.style` only reflects inline styles directly applied via the `style` attribute or JavaScript's `.style` property, not styles inherited from stylesheets.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 13: How would you set the `font-weight` of an element to `bold`?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You need to use camelCase for the property name:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.fontWeight = \"bold\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 14: What does setting `element.style.display = \"\"` do?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Setting a style property to an empty string <strong>removes that specific inline style</strong> from the element. The element will then revert to the style defined in CSS stylesheets or browser defaults.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"question-answer-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Question 15: How can you read the color of an element that might have its color set by both a stylesheet and an inline style?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> To get the *computed* style (the final, rendered style), you would use `window.getComputedStyle(element).color`. Accessing `element.style.color` only retrieves styles explicitly set inline via JavaScript or the `style` attribute.\n            </p>\n        </div>\n    </div>\n\n</div>\n<!--end-of-code-block-->",
  "display_order": 12,
  "created_at": "2025-06-29 16:06:33",
  "updated_at": "2025-07-01 02:17:35",
  "exercises": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 12: Styling Elements with style Property</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Let's Practice Dynamic Styling!</h2>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 1: Change Text Color</h3>\n        <p class=\"text-gray-600 mb-3\">Given an element with `id=\"myText\"`, change its text color to red using JavaScript.</p>\n        <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code><p id=\"myText\">This text will change.</p></code></pre>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const myTextElement = document.getElementById(\"myText\");\nif (myTextElement) {\n  myTextElement.style.color = \"red\";\n}</code></pre>\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Element -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"50\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">HTML: <p id=\"myText\">...</p></text>\n                    <!-- JS Code -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: element.style.color = \"red\";</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                    <text x=\"350\" y=\"145\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#33691E\">Sets inline style</text>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 2: Change Background Color</h3>\n        <p class=\"text-gray-600 mb-3\">Find the element with `id=\"mainBox\"` and set its background color to light blue.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const mainBoxElement = document.getElementById(\"mainBox\");\nif (mainBoxElement) {\n  mainBoxElement.style.backgroundColor = \"lightblue\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 3: Set Font Size and Alignment</h3>\n        <p class=\"text-gray-600 mb-3\">Select the paragraph with `id=\"description\"` and set its font size to \"18px\" and text alignment to \"center\".</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong>\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const descriptionPara = document.getElementById(\"description\");\nif (descriptionPara) {\n  descriptionPara.style.fontSize = \"18px\";\n  descriptionPara.style.textAlign = \"center\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 4: Hiding an Element</h3>\n        <p class=\"text-gray-600 mb-3\">How would you hide an element with the ID \"error-message\" using JavaScript style manipulation?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You would set its `display` style property to `none`:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const errorMsg = document.getElementById(\"error-message\");\nif (errorMsg) {\n  errorMsg.style.display = \"none\";\n}</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 5: Reading a Style</h3>\n        <p class=\"text-gray-600 mb-3\">Given an element with `id=\"myBox\"`, how would you read its current `backgroundColor` style (if it was set inline)?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You would use the `.style` property:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>const myBox = document.getElementById(\"myBox\");\nif (myBox) {\n  const bgColor = myBox.style.backgroundColor;\n  console.log(bgColor); // Logs the inline background color, or \"\" if not set inline\n}</code></pre>\n            </p>\n            <!-- SVG Illustration -->\n            <div class=\"flex justify-center mt-4\">\n                <svg class=\"h-48 w-full max-w-md\" viewBox=\"0 0 600 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"600\" height=\"300\" rx=\"10\" fill=\"#F0F4F8\"/>\n                    <!-- Element -->\n                    <rect x=\"50\" y=\"100\" width=\"250\" height=\"100\" rx=\"8\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-width=\"1\"/>\n                    <text x=\"175\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#E64A19\">HTML: <div id=\"myBox\" style=\"background-color: lightblue;\">...</text>\n                    <!-- JS Code -->\n                    <rect x=\"350\" y=\"100\" width=\"200\" height=\"80\" rx=\"8\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"450\" y=\"130\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">JS: const color = myBox.style.backgroundColor;</text>\n                    <text x=\"450\" y=\"155\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"#1976D2\">Result: \"lightblue\" (or \"\" if not inline)</text>\n                    <!-- Connection -->\n                    <path d=\"M300 130 Q 350 130 400 140\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"400 140 385 150 385 130\" fill=\"#7CB342\"/>\n                </svg>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 6: Why is it often better to use `classList` than `.style` for adding multiple styles?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It's better for organization, reusability, and maintainability. Keeping styles in CSS classes separates presentation from behavior, making the code cleaner and easier to manage. Directly manipulating `.style` can lead to scattered inline styles.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 7: What does `.style` return for a property not set inline?</h3>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> It returns an <strong>empty string (`\"\"`)</strong> for properties that have not been directly set inline via `style=\"...\"` or JavaScript's `.style`.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 8: Setting margin</h3>\n        <p class=\"text-gray-600 mb-3\">How do you set the left margin of an element to 15 pixels?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Remember camelCase for hyphenated properties:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.marginLeft = \"15px\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 9: Setting multiple styles</h3>\n        <p class=\"text-gray-600 mb-3\">Change the background color to yellow and the text color to white for an element.</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> You chain the style assignments:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.backgroundColor = \"yellow\";\nelement.style.color = \"white\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 10: Resetting a style</h3>\n        <p class=\"text-gray-600 mb-3\">How would you remove the inline `display` style that was set by JavaScript (e.g., to hide an element)?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Set the style property to an empty string:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.display = \"\";</code></pre>\n                This removes the inline style, allowing CSS rules to take effect again.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 11: Reading a Computed Style</h3>\n        <p class=\"text-gray-600 mb-3\">If a paragraph's color is set by a CSS stylesheet (not inline), will `element.style.color` correctly retrieve it?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> No, `element.style.color` only reads styles directly set inline. To get the final, computed style, you'd use `window.getComputedStyle(element).color`.\n            </p>\n        </div>\n    </div>\n\n    <div class=\"exercise-container mb-8\">\n        <h3 class=\"text-xl font-bold text-gray-800 mb-3\">Exercise 12: Setting a specific pixel value</h3>\n        <p class=\"text-gray-600 mb-3\">How would you set the `width` style of an element to `200px`?</p>\n        <button class=\"show-answer-button bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-3\">Show Answer</button>\n        <div class=\"answer-container hidden bg-gray-100 p-4 rounded\">\n            <p class=\"text-gray-700\">\n                <strong>Answer:</strong> Include the unit in the string value:\n                <pre class=\"bg-gray-100 p-2 rounded text-sm font-mono overflow-x-auto\"><code>element.style.width = \"200px\";</code></pre>\n            </p>\n        </div>\n    </div>\n\n</div>\n<!--end-of-code-block-->",
  "video": null,
  "intros": "<div class=\"tabs-container\">\n    <h2 class=\"text-3xl font-extrabold text-gray-800 mb-6 mt-6 text-center\">Lesson 12: Styling Elements with style Property</h2>\n    <p class=\"text-gray-600 text-lg mb-8 text-center px-4\">Become a webpage artist - paint dynamic styles directly onto elements with JavaScript!</p>                   \n\n    <div class=\"tab-content-container p-6 sm:p-8\">\n        <div class=\"tab-content content1\" id=\"content1\">\n            <h3 class=\"intro-title text-xl font-semibold text-gray-700 mb-3\">Dynamic Style Magic</h3>\n            <h2 class=\"intro-question text-2xl font-bold text-gray-900 mb-4\">What if you could paint directly on webpage elements like a digital artist?</h2>\n            \n            <div class=\"description-container flex flex-col justify-center w-full mb-6 p-4 bg-gray-50 rounded-lg shadow-inner\">\n                <!-- 16:9 Aspect Ratio SVG -->\n                <div class=\"w-full max-w-4xl mx-auto mb-6\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 800 450\" class=\"w-full h-auto bg-white rounded-lg\">\n                        <!-- Browser Window -->\n                        <rect x=\"50\" y=\"30\" width=\"700\" height=\"390\" fill=\"#F3F4F6\" stroke=\"#D1D5DB\" stroke-width=\"2\" rx=\"4\"/>\n                        \n                        <!-- Browser Header -->\n                        <rect x=\"50\" y=\"30\" width=\"700\" height=\"40\" fill=\"#E5E7EB\" rx=\"4\"/>\n                        <circle cx=\"70\" cy=\"50\" r=\"6\" fill=\"#EF4444\"/>\n                        <circle cx=\"90\" cy=\"50\" r=\"6\" fill=\"#FBBF24\"/>\n                        <circle cx=\"110\" cy=\"50\" r=\"6\" fill=\"#10B981\"/>\n                        \n                        <!-- Plain Element -->\n                        <rect x=\"150\" y=\"100\" width=\"180\" height=\"120\" fill=\"#E5E7EB\" stroke=\"#9CA3AF\" stroke-width=\"2\" rx=\"4\"/>\n                        <text x=\"240\" y=\"150\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#4B5563\">Plain Box</text>\n                        <text x=\"240\" y=\"180\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#6B7280\">No styles applied</text>\n                        \n                        <!-- Styled Element -->\n                        <rect x=\"470\" y=\"100\" width=\"180\" height=\"120\" fill=\"#3B82F6\" stroke=\"#1D4ED8\" stroke-width=\"3\" rx=\"12\" filter=\"url(#shadow)\"/>\n                        <text x=\"560\" y=\"150\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"white\">Styled Box</text>\n                        <text x=\"560\" y=\"180\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"12\" fill=\"#BFDBFE\">With JavaScript styles</text>\n                        \n                        <!-- Painter Character -->\n                        <circle cx=\"350\" cy=\"150\" r=\"30\" fill=\"#FDE68A\"/>\n                        <path d=\"M 350 180 L 350 250 L 340 270 L 360 270 Z\" fill=\"#3B82F6\"/>\n                        <path d=\"M 330 140 L 310 120 L 390 120 L 370 140\" fill=\"#EF4444\"/>\n                        <path d=\"M 330 160 L 320 150\" stroke=\"#4B5563\" stroke-width=\"2\"/>\n                        <path d=\"M 370 160 L 380 150\" stroke=\"#4B5563\" stroke-width=\"2\"/>\n                        \n                        <!-- Paint Brush -->\n                        <rect x=\"380\" y=\"120\" width=\"60\" height=\"10\" fill=\"#92400E\" rx=\"2\"/>\n                        <path d=\"M 440 125 L 460 100 L 470 110 L 450 130 Z\" fill=\"#F59E0B\"/>\n                        \n                        <!-- Paint Splatters -->\n                        <circle cx=\"300\" cy=\"200\" r=\"8\" fill=\"#EF4444\"/>\n                        <circle cx=\"330\" cy=\"180\" r=\"5\" fill=\"#10B981\"/>\n                        <circle cx=\"360\" cy=\"210\" r=\"6\" fill=\"#3B82F6\"/>\n                        \n                        <!-- Style Properties -->\n                        <rect x=\"100\" y=\"250\" width=\"600\" height=\"120\" fill=\"#EDE9FE\" stroke=\"#8B5CF6\" stroke-width=\"2\" rx=\"4\"/>\n                        <text x=\"400\" y=\"270\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#6D28D9\">JavaScript Style Properties</text>\n                        \n                        <!-- Style Examples -->\n                        <text x=\"400\" y=\"300\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#1E40AF\">element.style.backgroundColor = \"blue\";</text>\n                        <text x=\"400\" y=\"325\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#1E40AF\">element.style.borderRadius = \"12px\";</text>\n                        <text x=\"400\" y=\"350\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#1E40AF\">element.style.boxShadow = \"5px 5px 10px gray\";</text>\n                        <text x=\"400\" y=\"375\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"14\" fill=\"#1E40AF\">element.style.transform = \"rotate(5deg)\";</text>\n                        \n                        <!-- Transformation Arrow -->\n                        <path d=\"M 320 150 L 450 150\" fill=\"none\" stroke=\"#8B5CF6\" stroke-width=\"3\" marker-end=\"url(#arrowhead)\"/>\n                        <text x=\"385\" y=\"140\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#6D28D9\">Applying Styles</text>\n                        \n                        <!-- Color Palette -->\n                        <circle cx=\"650\" cy=\"180\" r=\"40\" fill=\"white\" stroke=\"#9CA3AF\" stroke-width=\"2\"/>\n                        <circle cx=\"635\" cy=\"165\" r=\"8\" fill=\"#EF4444\"/>\n                        <circle cx=\"665\" cy=\"165\" r=\"8\" fill=\"#10B981\"/>\n                        <circle cx=\"635\" cy=\"195\" r=\"8\" fill=\"#3B82F6\"/>\n                        <circle cx=\"665\" cy=\"195\" r=\"8\" fill=\"#F59E0B\"/>\n                        \n                        <defs>\n                            <filter id=\"shadow\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n                                <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"5\"/> \n                                <feOffset dx=\"5\" dy=\"5\" result=\"offsetblur\"/>\n                                <feFlood flood-color=\"#3f3f46\" flood-opacity=\"0.5\"/>\n                                <feComposite in2=\"offsetblur\" operator=\"in\"/>\n                                <feMerge>\n                                    <feMergeNode/>\n                                    <feMergeNode in=\"SourceGraphic\"/>\n                                </feMerge>\n                            </filter>\n                            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"10\" refX=\"9\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\n                                <path d=\"M0,0 L0,6 L9,3 z\" fill=\"#8B5CF6\"/>\n                            </marker>\n                        </defs>\n                    </svg>\n                </div>\n                \n                <p class=\"intro-explanation text-gray-600 leading-relaxed\">\n                    Imagine having a magic paintbrush that lets you change any element's appearance in real-time! With the <code class=\"bg-gray-200 px-1 rounded\">style</code> property, you become a digital artist who can paint colors, shapes, and effects directly onto webpage elements using JavaScript. \n                </p>\n                <p class=\"intro-explanation text-gray-600 leading-relaxed mt-4\">\n                    This powerful tool lets you create dynamic visual effects that respond to user actions - highlight buttons when clicked, animate elements as they load, or create real-time data visualizations. Every CSS property is at your fingertips, waiting to be transformed into interactive experiences!\n                </p>                \n                <p class=\"intro-tagline mt-6 text-center font-semibold text-sky-600 italic\">\n                    \"Why show static content when you can create living, breathing visual experiences?\"\n                </p>\n            </div> \n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->",
  "summary": "<div>\n    <h1 class=\"text-4xl font-bold text-gray-800 mb-4 text-center\">Lesson 12: Styling Elements with style Property</h1>\n\n    <h2 class=\"text-2xl font-semibold text-gray-700 mb-6 mt-8\">Lesson Summary</h2>\n\n    <div class=\"summary-container bg-gray-50 p-6 rounded-lg shadow-md\">\n        <div class=\"flex flex-col lg:flex-row items-center lg:items-start gap-8 mb-8\">\n            <div class=\"lg:w-1/2\">\n                <h3 class=\"text-2xl font-bold text-gray-800 mb-4\">Direct Style Manipulation</h3>\n                <p class=\"text-gray-600 leading-relaxed mb-4\">\n                    JavaScript provides direct access to an element's inline styles through its `.style` property. This property acts like an object, exposing CSS properties that can be read or modified.\n                </p>\n                <p class=\"text-gray-600 leading-relaxed mb-4\">\n                    CSS properties with hyphens (e.g., `background-color`) are accessed using camelCase in JavaScript (e.g., `backgroundColor`). This method allows for dynamic styling changes based on user interactions or application logic.\n                </p>\n                <h4 class=\"text-xl font-semibold text-gray-700 mb-3\">Key Concepts:</h4>\n                <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                    <li>Access element styles via the `.style` property.</li>\n                    <li>Set/get individual CSS properties (e.g., `element.style.color`, `element.style.fontSize`).</li>\n                    <li>Use camelCase for hyphenated CSS properties (e.g., `backgroundColor`).</li>\n                    <li>Values usually need units (e.g., `\"16px\"`, `\"50%\"`).</li>\n                    <li>Applies styles directly to the inline `style` attribute.</li>\n                    <li>Often used for dynamic, interactive styling.</li>\n                </ul>\n            </div>\n            <div class=\"lg:w-1/2 flex justify-center\">\n                <!-- SVG Illustration: Style Property -->\n                <svg class=\"h-64 w-full max-w-xl\" viewBox=\"0 0 1920 1080\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"1920\" height=\"1080\" rx=\"10\" fill=\"#F8F9FA\"/>\n                    <!-- Element -->\n                    <rect x=\"100\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#FFF9C4\" stroke=\"#FFF59D\" stroke-width=\"2\"/>\n                    <text x=\"500\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#E65100\">Target Element</text>\n                    <rect x=\"150\" y=\"200\" width=\"700\" height=\"100\" rx=\"5\" fill=\"#FFE0B2\" stroke=\"#FFB74D\" stroke-1=\"1\"/>\n                    <text x=\"500\" y=\"250\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E65100\">Original: <p>Text</p></text>\n                    <!-- JavaScript Styling -->\n                    <rect x=\"1000\" y=\"100\" width=\"800\" height=\"800\" rx=\"10\" fill=\"#E3F2FD\" stroke=\"#90CAF9\" stroke-width=\"2\"/>\n                    <text x=\"1400\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" font-size=\"30\" fill=\"#1976D2\">JS Styling Action</text>\n                    <rect x=\"1100\" y=\"200\" width=\"700\" height=\"40\" rx=\"5\" fill=\"#C8E6C9\" stroke=\"#81C784\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"230\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#2E7D32\">element.style.color = \"blue\";</text>\n                    <rect x=\"1100\" y=\"300\" width=\"700\" height=\"150\" rx=\"5\" fill=\"#FFCCBC\" stroke=\"#FF8A65\" stroke-1=\"1\"/>\n                    <text x=\"1450\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"#E64A19\">element.style.fontSize = \"20px\";</text>\n                    <!-- Connection -->\n                    <path d=\"M800 350 Q 900 350 1100 350\" stroke=\"#7CB342\" stroke-width=\"4\" fill=\"none\" stroke-dasharray=\"8,4\"/>\n                    <polygon points=\"1100 350 1085 360 1085 340\" fill=\"#7CB342\"/>\n                    <text x=\"950\" y=\"355\" font-family=\"Arial, sans-serif\" font-size=\"20\" fill=\"#33691E\">Direct Style Manipulation</text>\n                </svg>\n            </div>\n        </div>\n\n        <div class=\"bg-yellow-50 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-r-lg mb-6\" role=\"alert\">\n            <p class=\"font-bold\">Best Practice:</p>\n            <p>While `.style` is great for dynamic, specific changes, managing general styles through CSS classes (using `classList`) is often preferred for better organization and maintainability.</p>\n        </div>\n    </div>\n</div>\n<!--end-of-code-block-->"
}